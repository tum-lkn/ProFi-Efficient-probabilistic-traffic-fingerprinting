import os
import numpy as np
import json as js

sym_lookup = {'20': 0, '21': 1, '23': 2, '22:1': 3, '22:2': 4, '22:11': 5,
              '22:12': 6, '22:14': 7, '22:16': 8, '22:22': 9, '22:0': 10, '22:4': 11,
              '22:47': 12, '22:132': 13, '22:193': 14, '22:180': 15, '22:5': 16,
              '22:43': 17, '22:166': 18, '22:184': 19, '22:57': 20, '22:68': 21,
              '22:116': 22, '22:19': 23, '22:169': 24, '22:185': 25, '22:156': 26,
              '22:141': 27, '22:39': 28}
for s in ['22:194',  '22:207',  '22:229',  '22:234',  '22:72',  '22:244',  '22:77',  '22:62',  '22:45',  '22:82',  '22:125',  '22:42',  '22:38',  '22:255',  '22:150',  '22:206',  '22:170',  '22:66',  '22:78',  '22:103',  '22:122',  '22:63',  '22:148',  '22:129',  '22:133',  '22:3',  '22:149',  '22:55',  '22:13',  '22:76',  '22:225',  '22:214',  '22:17',  '22:128',  '22:224',  '22:20',  '22:177',  '22:83',  '22:247',  '22:219',  '22:176',  '22:111',  '22:85',  '22:179',  '22:9',  '22:159',  '22:10',  '22:32',  '22:187',  '22:7',  '22:203',  '22:198',  '22:37',  '22:195',  '22:251',  '22:40',  '22:248',  '22:237',  '22:205',  '22:157',  '22:220',  '22:56',  '22:252',  '22:90',  '22:44',  '22:197',  '22:151',  '22:35',  '22:138',  '22:89',  '22:86',  '22:163',  '22:146',  '22:112',  '22:143',  '22:217',  '22:245',  '22:28',  '22:88',  '22:172',  '22:136',  '22:25',  '22:131',  '22:196',  '22:99',  '22:92',  '22:222',  '22:79',  '22:121',  '22:213',  '22:192',  '22:240',  '22:108',  '22:59',  '22:100',  '22:202',  '22:215',  '22:200',  '22:41',  '22:117',  '22:109',  '22:142',  '22:34',  '22:254',  '22:209',  '22:61',  '22:70',  '22:49',  '22:253',  '22:18',  '22:167',  '22:231',  '22:50',  '22:95',  '22:226',  '22:26',  '22:139',  '22:65',  '22:6',  '22:221',  '22:212',  '22:113',  '22:126',  '22:182',  '22:208',  '22:190',  '22:144',  '22:130',  '22:115',  '22:123',  '22:199',  '22:174',  '22:33',  '22:232',  '22:52',  '22:71',  '22:155',  '22:211',  '22:189',  '22:218',  '22:204',  '22:75',  '22:230',  '22:107',  '22:93',  '22:147',  '22:119',  '22:127',  '22:96',  '22:175',  '22:233',  '22:162',  '22:104',  '22:134',  '22:80',  '22:171',  '22:27',  '22:160',  '22:64',  '22:58',  '22:102',  '22:106',  '22:250',  '22:97',  '22:23',  '22:73',  '22:53',  '22:101',  '22:186',  '22:87',  '22:29',  '22:145',  '22:105',  '22:60',  '22:21',  '22:168',  '22:91',  '22:173',  '22:164',  '22:243',  '22:239',  '22:84',  '22:24',  '22:94',  '22:235',  '22:181',  '22:216',  '22:67',  '22:135',  '22:223',  '22:227',  '22:228',  '22:120',  '22:241',  '22:178',  '22:188',  '22:140',  '22:48',  '22:46',  '22:210',  '22:81',  '22:15',  '22:30',  '22:54',  '22:201',  '22:158',  '22:118',  '22:114',  '22:165',  '22:51',  '22:69',  '22:246',  '22:191',  '22:161',  '22:74',  '22:249',  '22:36',  '22:31',  '22:124',  '22:153',  '22:137',  '22:154',  '22:8',  '22:152',  '22:242',  '22:238',  '22:183',  '22:98',  '22:110',  '22:236',  '22:194',  '22:207',  '22:229',  '22:234',  '22:72',  '22:244',  '22:77',  '22:62',  '22:45',  '22:82',  '22:125',  '22:42',  '22:38',  '22:255',  '22:150',  '22:206',  '22:170',  '22:66',  '22:78',  '22:103',  '22:122',  '22:63',  '22:148',  '22:129',  '22:133',  '22:3',  '22:149',  '22:55',  '22:13',  '22:76',  '22:225',  '22:214',  '22:17',  '22:128',  '22:224',  '22:20',  '22:177',  '22:83',  '22:247',  '22:219',  '22:176',  '22:111',  '22:85',  '22:179',  '22:9',  '22:159',  '22:10',  '22:32',  '22:187',  '22:7',  '22:203',  '22:198',  '22:37',  '22:195',  '22:251',  '22:40',  '22:248',  '22:237',  '22:205',  '22:157',  '22:220',  '22:56',  '22:252',  '22:90',  '22:44',  '22:197',  '22:151',  '22:35',  '22:138',  '22:89',  '22:86',  '22:163',  '22:146',  '22:112',  '22:143',  '22:217',  '22:245',  '22:28',  '22:88',  '22:172',  '22:136',  '22:25',  '22:131',  '22:196',  '22:99',  '22:92',  '22:222',  '22:79',  '22:121',  '22:213',  '22:192',  '22:240',  '22:108',  '22:59',  '22:100',  '22:202',  '22:215',  '22:200',  '22:41',  '22:117',  '22:109',  '22:142',  '22:34',  '22:254',  '22:209',  '22:61',  '22:70',  '22:49',  '22:253',  '22:18',  '22:167',  '22:231',  '22:50',  '22:95',  '22:226',  '22:26',  '22:139',  '22:65',  '22:6',  '22:221',  '22:212',  '22:113',  '22:126',  '22:182',  '22:208',  '22:190',  '22:144',  '22:130',  '22:115',  '22:123',  '22:199',  '22:174',  '22:33',  '22:232',  '22:52',  '22:71',  '22:155',  '22:211',  '22:189',  '22:218',  '22:204',  '22:75',  '22:230',  '22:107',  '22:93',  '22:147',  '22:119',  '22:127',  '22:96',  '22:175',  '22:233',  '22:162',  '22:104',  '22:134',  '22:80',  '22:171',  '22:27',  '22:160',  '22:64',  '22:58',  '22:102',  '22:106',  '22:250',  '22:97',  '22:23',  '22:73',  '22:53',  '22:101',  '22:186',  '22:87',  '22:29',  '22:145',  '22:105',  '22:60',  '22:21',  '22:168',  '22:91',  '22:173',  '22:164',  '22:243',  '22:239',  '22:84',  '22:24',  '22:94',  '22:235',  '22:181',  '22:216',  '22:67',  '22:135',  '22:223',  '22:227',  '22:228',  '22:120',  '22:241',  '22:178',  '22:188',  '22:140',  '22:48',  '22:46',  '22:210',  '22:81',  '22:15',  '22:30',  '22:54',  '22:201',  '22:158',  '22:118',  '22:114',  '22:165',  '22:51',  '22:69',  '22:246',  '22:191',  '22:161',  '22:74',  '22:249',  '22:36',  '22:31',  '22:124',  '22:153',  '22:137',  '22:154',  '22:8',  '22:152',  '22:242',  '22:238',  '22:183',  '22:98',  '22:110',  '22:236']:
    sym_lookup[s] = len(sym_lookup)


def load_model_config(model_path, config_path):
    with open(model_path, 'r') as f:
        js_data = js.load(f)

    with open(config_path, 'r') as f:
        js_data_c = js.load(f)

    obs_mat = {eval(k):v for k, v in js_data['p_o_in_i'].items()}

    obs = list(set([k1 for k1, k2 in obs_mat.keys()]))
    obs.sort()

    return list(js_data['p_ij'].values()), obs_mat, obs, js_data['duration'], js_data_c['seq_length'], js_data_c['avg_log_prob_val'], js_data_c['num_bins'], js_data_c['binning_method']


def compute_hash(symbol):
    """
    Computes the hash of the symbol based on the djb2 hash:
    http://www.cse.yorku.ca/~oz/hash.html

    Args:
        symbol: 

    Returns:

    """
    conv_sym = []
    split_sym = symbol.split(';')
    if split_sym[-1] == 'S':
        conv_sym.append(0)
    else:
        conv_sym.append(1)
    conv_sym.append((int(split_sym[-2]) >> 8) & 0x00ff)
    conv_sym.append((int(split_sym[-2])) & 0x00ff)
    features = split_sym[0].split('|')
    for feature in features:
        if feature not in sym_lookup:
            print(f"'{feature}', ", end=' ')
        else:
            conv_sym.append(sym_lookup[feature])
    # Use numpy arrays to get the correct hashes. With python, super large values
    # that exceed an uint64 are generated which do not map the hashes from the
    # c-code.
    hash_v = np.array([5381], dtype=np.uint64)
    for v in conv_sym:
        v = np.array([v], dtype=np.uint64)
        hash_v = (np.left_shift(hash_v, 5) + hash_v) + v
    return hash_v[0]


def save_model_config(model_path, config_path, p_ij, p_o_in_i, values, duration, trace_length, threshold, num_bins, binning):

    model = {}
    model['trace_length'] = trace_length
    model['hmm_duration'] = duration
    model['num_obs'] = len(values)
    model['threshold'] = threshold
    model['trans_matrix'] = p_ij
    model['obs_matrix'] = p_o_in_i
    model['symbol'] = values

    config = {}
    config['num_bins'] = num_bins
    config['bins'] = np.rint(get_binning_centers(num_bins, binning)).tolist()

    json_file_model = os.path.join(os.path.dirname(model_path), 'onvm_' + os.path.basename(model_path))
    json_file_config = os.path.join(os.path.dirname(config_path), 'onvm_' + os.path.basename(config_path))

    with open(json_file_model, 'w', encoding='utf-8') as f:
        js.dump(model, f, ensure_ascii=False, indent=4)

    with open(json_file_config, 'w', encoding='utf-8') as f:
        js.dump(config, f, ensure_ascii=False, indent=4)


def convert_model_config():

    model_path = ''
    config_path = ''

    p_ij, obs_mat, obs, duration, trace_length, threshold, num_bins, binning = load_model_config(model_path, config_path)

    obs_to_hash_map = {compute_hash(v): v for v in obs}

    values = list(obs_to_hash_map.keys())
    values.sort()

    p_o_in_i = []
    for value in values:
        p_o_in_i.extend({(k1, k2): v for (k1, k2), v in obs_mat.items() if k1 == obs_to_hash_map[value]}.values())

    save_model_config(model_path, config_path, p_ij, p_o_in_i, values, duration, trace_length, threshold, num_bins, binning)


if __name__ == '__main__' :
    convert_model_config()